/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package aodebasedids;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import weka.attributeSelection.AttributeSelection;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.GreedyStepwise;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.AODE;
import weka.classifiers.evaluation.NominalPrediction;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.PART;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.core.FastVector;
import weka.core.Instances;
import weka.core.Utils;
import weka.core.converters.ArffSaver;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils.DataSource;
import weka.filters.Filter;

/**
 *
 * @author Elcot
 */
public class AODEFrame extends javax.swing.JFrame {

    /**
     * Creates new form AODEFrame
     */
    String fn="";
    String fn5="";
    String fn4="";
    ArrayList duration=new ArrayList();
    ArrayList srcbytes=new ArrayList();
    ArrayList destbytes=new ArrayList();
    ArrayList val1=new ArrayList();
    ArrayList val2=new ArrayList();
    ArrayList val3=new ArrayList();
    ArrayList nominal=new ArrayList();
    ArrayList nominalval=new ArrayList();
    public AODEFrame() {
        initComponents();        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 24)); // NOI18N
        jLabel1.setText(" DDOS DETECTION");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("File path");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(301, 301, 301)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(15, 15, 15)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("NSL KDD Dataset", jPanel2);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane1.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Numeric to Nominal Conversion", jPanel3);

        jButton2.setText("Feature Selection");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Information Gain");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Intrinsic Information");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Gain Ratio");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(61, 61, 61)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(110, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Future Selection", jPanel5);

        jButton6.setText("Average One Dependence Estimator Classifier");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane2.setViewportView(jTextArea3);

        jLabel2.setText("Testing Data set");

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jButton8.setText("Browse");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                            .addGap(40, 40, 40)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButton8)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(jButton6)))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton8))
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Machine Learning", jPanel4);

        jButton7.setText("Evaluation");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(280, 280, 280)
                .addComponent(jButton7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jButton7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Evaluation", jPanel6);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(341, 341, 341)
                        .addComponent(jLabel1)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            JFileChooser fc=new JFileChooser();
            int result=fc.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) 
            {
                File file=fc.getSelectedFile();
                jTextField1.setText(file.getAbsolutePath());
                //pa=file.getAbsolutePath();
                //fa=file.getName();
                
                String fname=file.getAbsolutePath();
                File fe=new File(fname);
                FileInputStream fis=new FileInputStream(fe);
                byte data[]=new byte[fis.available()];
                fis.read(data);
                fis.close();
                String str=new String(data);
                jTextArea1.setText(str);
                System.out.println(str);
                String s[]=str.split("\n");
                String s1[]=s[0].split(",");
                String k1="";
                for(int k=0;k<s1.length;k++)
                {
                    k1=k1+s1[k]+",";
                }
                String k2=k1.substring(0,k1.lastIndexOf(','));
                nominalval.add(k2);
            
                for(int i=1;i<s.length;i++)
                {
                    String s2[]=s[i].split(",");
                    //dm.addRow(s2);
                    duration.add(s2[0]);
                    srcbytes.add(s2[4]);
                    destbytes.add(s2[5]);
                }
                
                int h=0;
                for(int g=0;g<srcbytes.size();g++)
                {
                    String g1=srcbytes.get(g).toString();
                    h=h+Integer.parseInt(g1);
                }
                int n=h/srcbytes.size();
                
                int h1=0;
                for(int g=0;g<destbytes.size();g++)
                {
                String g1=destbytes.get(g).toString();
                h1=h1+Integer.parseInt(g1);
                }
                int n1=h1/destbytes.size();
                //String nominal=str;
                for(int i=1;i<s.length;i++)
                {
                    //Vector v=new Vector();
                    String s2[]=s[i].split(",");
                    for(int j=0;j<s2.length;j++)
                    {
                        if(j==0)
                        {
                           //nominal.add(s2[0]+"#period1");
                            System.out.println("-----------------------");
                            System.out.println("s2[0] is "+s2[0]);
                            if(s2[0].equals("0"))
                            {
                                s2[0]="period 1";
                                nominal.add(s2[0]);
                            }
                            //nominal=nominal.replace(s2[j],"period 1");
                            System.out.println("nominal is "+nominal);
                            //v.add("period 1");
                        }
                        else if(j==4)
                        {
                            System.out.println("s2[4] is "+s2[4]);
                            if(Integer.parseInt(s2[4])<n)
                            {
                                //nominal=nominal.replace(s2[j],"small");
                                nominal.add("small");
                                //System.out.println("nominal is "+nominal);
                                //v.add("small");
                            }
                            else if((n<=Integer.parseInt(s2[4]))&&(Integer.parseInt(s2[4])<2*n))
                            {
                                //nominal=nominal.replace(s2[j],"medium");
                                nominal.add("medium");
                                //v.add("medium");
                            }
                            else
                            {
                                nominal.add("large");                                
                            }
                            
                        }                    
                        else if(j==5)
                        {
                            System.out.println("s2[5] is "+s2[5]);
                            if(Integer.parseInt(s2[5])<n1)
                            {                                
                                nominal.add("SM");                             
                            }
                            else if((n1<=Integer.parseInt(s2[5]))&&(Integer.parseInt(s2[5])<2*n1))
                            {                                
                                nominal.add("ME");
                            }
                            else
                            {
                                nominal.add("LA");                                
                            }                        
                        }
                        else
                        {
                            nominal.add(s2[j]);                                               
                        }
                    }
                    String st1="";
                    for(int j=0;j<nominal.size();j++)
                    {
                        String st=nominal.get(j).toString();
                        st1=st1+st+",";
                    }
                    nominal=new ArrayList();
                    String st2=st1.substring(0,st1.lastIndexOf(','));
                    System.out.println("st2 is "+st2);
                    nominalval.add(st2);                    
                }
                String st3="";
                for(int i=0;i<nominalval.size();i++)
                {
                    String nom=nominalval.get(i).toString();
                    st3=st3+nom+"\n";                                            
                }
                String st4=st3.substring(0,st3.lastIndexOf('\n'));
                jTextArea2.setText(st4);
                String fname1="nominal.csv";
                File file1=new File(fname1);
                FileOutputStream fos=new FileOutputStream(file1);
                fos.write(st4.getBytes());
                fos.close();
                
                
            }
            else if (result == JFileChooser.CANCEL_OPTION) 
            {
                JOptionPane.showMessageDialog(this,"Open Command cancelled by user.");
            } 
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try
        {                
                        //Feature Selection
            
            String sou="nominal.csv";
            File file = new File(sou);
            int index = file.getName().lastIndexOf('.');
            String fname="";
            if (index>0&& index <= file.getName().length() - 2 ) 
            {
                fname=file.getName().substring(0, index);
            }
            System.out.println("fname is "+fname);
            
                        //Convert this file CSV format to Arff format
            
                // load CSV
            CSVLoader loader = new CSVLoader();
            System.out.println("src1 is "+sou);
            loader.setSource(new File(sou));
            Instances data1 = loader.getDataSet();
 
                // save ARFF
            ArffSaver saver = new ArffSaver();
            saver.setInstances(data1);
            saver.setFile(new File(fname+".arff"));
            fn=fname+".arff";
            saver.writeBatch();
            
            String sou1=jTextField1.getText();
            File file1 = new File(sou1);
            int index1= file1.getName().lastIndexOf('.');
            String fname1="";
            if (index1>0&& index1 <= file1.getName().length() - 2 ) 
            {
                fname1=file1.getName().substring(0, index1);
            }
            System.out.println("fname1 is "+fname1);
            
                        //Convert this file CSV format to Arff format
            
                // load CSV
            CSVLoader loader1 = new CSVLoader();
            System.out.println("src1 is "+sou);
            loader1.setSource(new File(sou));
            Instances data = loader1.getDataSet();
 
                // save ARFF
            ArffSaver saver1 = new ArffSaver();
            saver1.setInstances(data);
            saver1.setFile(new File(fname1+".arff"));
            fn4=fname1+".arff";
            //fn=fname+".arff";
            saver1.writeBatch();
            
            System.out.println("\n0. Loading data");
            DataSource source = new DataSource(fname+".arff");
            Instances data2 = source.getDataSet();
            if (data2.classIndex() == -1)
            data2.setClassIndex(data2.numAttributes() - 1);

                // 1. meta-classifier
            useClassifier(data2);

                // 2. filter
            useFilter(data2);

                // 3. low-level
            useLowLevel(data2);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        fn5="t.arff";
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String ig=jTextField2.getText();
        String s1[]=ig.split(",");        
	try
	{
            try
            {
                double d1[]=new double[s1.length];
                double d2=0;
                for(int i=0;i<s1.length;i++)
                {
                    d1[i]=new Integer(s1[i]).intValue();
                    d2=d2+d1[i];
                }
                double d5=0;
                for(int i=0;i<d1.length;i++)
                {
                    double d3=d1[i]/d2;
                    double d4=Math.log(((d1[i]==0)?1:d1[i])/(d2));
                    d5=d5+(d3*d4);
                }
                double d6=d5*(-1);
                double iGain=d6/Math.log(2);
                System.out.println(iGain);
                jTextField3.setText(""+iGain);
            }
            catch(NumberFormatException nfe)
            {
                System.out.println("Error in input \""+nfe+"\"");	
            }
			
        }
        catch(Exception e)
	{
            System.out.println("Error in input \""+e+"\"");	
	}				
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String ig=jTextField2.getText();
        String s1[]=ig.split(",");      
        double d1[]=new double[s1.length];
        double d2=0;
        for(int i=0;i<s1.length;i++)
        {
            d1[i]=new Integer(s1[i]).intValue();
            d2=d2+d1[i];
        }
        double intrininfo=d2*((-1/d2)*Math.log(1/d2));
        jTextField4.setText(""+intrininfo);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        double gainratio=(Double.parseDouble(jTextField3.getText())/Double.parseDouble(jTextField4.getText()));
        jTextField5.setText(""+gainratio);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try
	{
            //String fn1="iris.arff";
            //String fn2="iris.arff";
            String fn1=fn;
            String fn2=jTextField6.getText();
            fn=jTextField6.getText();
            Instances train = new Instances(new BufferedReader(new FileReader(fn1)));
            Instances test = new Instances(new BufferedReader(new FileReader(fn2)));
            int cIdx=train.numAttributes()-1;
            train.setClassIndex(cIdx);
		
            int cIdx1=test.numAttributes()-1;
            test.setClassIndex(cIdx1);
            //Classifier cls = new J48();
            Classifier cls = new AODE();
            cls.buildClassifier(train);
            // evaluate classifier and print some statistics
            Evaluation eval = new Evaluation(train);
            eval.evaluateModel(cls, test);
            System.out.println(eval.toSummaryString("\nResults\n======\n", false));
            System.out.println("class "+eval.toClassDetailsString());
            System.out.println("mat "+eval.toMatrixString());
            jTextArea3.setText("class "+eval.toClassDetailsString()+"\n"+"\n"+"mat"+eval.toMatrixString());
		
	}
	catch(Exception e)
	{
            e.printStackTrace();
	}
  
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        String st="";
        String st1="";
        try
        {
            System.out.println("fn4 is "+fn4);
            System.out.println("fn5 is "+fn5);
            BufferedReader datafile = readDataFile(fn5);
 
            Instances data = new Instances(datafile);
            data.setClassIndex(data.numAttributes() - 1);
 
            // Do 10-split cross validation
            Instances[][] split = crossValidationSplit(data, 10);
 
            // Separate split into training and testing arrays
            Instances[] trainingSplits = split[0];
            Instances[] testingSplits = split[1];
        	// Use a set of classifiers
            Classifier[] models = { 
                new J48(), // a decision tree
                new PART(), 
                new DecisionTable(),//decision table majority classifier
                //new AODE(),
                new DecisionStump() //one-level decision tree
            };
 
            // Run for each model
            for (int j = 0; j < models.length; j++) 
            {
 
                // Collect every group of predictions for current model in a FastVector
                FastVector predictions = new FastVector();
 
                // For each training-testing split pair, train and test the classifier
                for (int i = 0; i < trainingSplits.length; i++) 
                {
                    Evaluation validation = classify(models[j], trainingSplits[i], testingSplits[i]);
                    predictions.appendElements(validation.predictions());
 
				// Uncomment to see the summary for each training-testing pair.
				//System.out.println(models[j].toString());
		}
 
			// Calculate overall accuracy of current classifier on all splits
                double accuracy = calculateAccuracy(predictions);
 
			// Print current classifier's name and accuracy in a complicated,
			// but nice-looking way.
                System.out.println("Accuracy of " + models[j].getClass().getSimpleName() + ": "
					+ String.format("%.2f%%", accuracy)
					+ "\n---------------------------------");
                st=st+"Accuracy of " + models[j].getClass().getSimpleName() + ": "
					+ String.format("%.2f%%", accuracy)
					+ "\n---------------------------------"+"\n";
            }
         }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        //jTextArea4.setText(st);  /* jTextArea4.setText("Accuracy of " + models[j].getClass().getSimpleName() + ": "
					//+ String.format("%.2f%%", accuracy)
					//+ "\n---------------------------------");*/
         try
         {
            BufferedReader datafile1 = readDataFile(fn);
 
            Instances data1 = new Instances(datafile1);
            data1.setClassIndex(data1.numAttributes() - 1);
 
            // Do 10-split cross validation
            Instances[][] split1 = crossValidationSplit(data1, 10);
 
            // Separate split into training and testing arrays
            Instances[] trainingSplits1 = split1[0];
            Instances[] testingSplits1 = split1[1];
        	// Use a set of classifiers
            Classifier models1 =new AODE();
            // Collect every group of predictions for current model in a FastVector
            FastVector predictions1 = new FastVector();
 
            // For each training-testing split pair, train and test the classifier
            for (int i = 0; i < trainingSplits1.length; i++) {
		Evaluation validation = classify(models1, trainingSplits1[i], testingSplits1[i]);
 		predictions1.appendElements(validation.predictions());
 
				// Uncomment to see the summary for each training-testing pair.
				//System.out.println(models[j].toString());
			}
 
			// Calculate overall accuracy of current classifier on all splits
            double accuracy1 = calculateAccuracy(predictions1);
 
			// Print current classifier's name and accuracy in a complicated,
			// but nice-looking way.
            System.out.println("Accuracy of " + models1.getClass().getSimpleName() + ": "
					+ String.format("%.2f%%", accuracy1)
					+ "\n---------------------------------");
            st1=st+"Accuracy of " + models1.getClass().getSimpleName() + ": "
					+ String.format("%.2f%%", accuracy1)
					+ "\n---------------------------------";
           //jTextArea4.setText("Accuracy of " + models[j].getClass().getSimpleName() + ": "
					//+ String.format("%.2f%%", accuracy)
					//+ 
		
            //String st2=st.substring(0,st.lastIndexOf('\n'));
            jTextArea4.setText(st1);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
 
	
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        try
        {
            JFileChooser fc=new JFileChooser();
            int result=fc.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) 
            {
                File file=fc.getSelectedFile();
                jTextField6.setText(file.getAbsolutePath());
                
                
            }
            else if (result == JFileChooser.CANCEL_OPTION) 
            {
                JOptionPane.showMessageDialog(this,"Open Command cancelled by user.");
            } 
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AODEFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AODEFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AODEFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AODEFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AODEFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables

    private void useClassifier(Instances data) throws Exception {
        System.out.println("\n1. Meta-classfier");
        AttributeSelectedClassifier classifier = new AttributeSelectedClassifier();
        CfsSubsetEval eval = new CfsSubsetEval();
        GreedyStepwise search = new GreedyStepwise();
        search.setSearchBackwards(true);
        J48 base = new J48();
        classifier.setClassifier(base);
        classifier.setEvaluator(eval);
        classifier.setSearch(search);
        Evaluation evaluation = new Evaluation(data);
        evaluation.crossValidateModel(classifier, data, 10, new Random(1));
        System.out.println(evaluation.toSummaryString());
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void useFilter(Instances data) throws Exception{
        System.out.println("\n2. Filter");
        weka.filters.supervised.attribute.AttributeSelection filter = new weka.filters.supervised.attribute.AttributeSelection();
        CfsSubsetEval eval = new CfsSubsetEval();
        GreedyStepwise search = new GreedyStepwise();
        search.setSearchBackwards(true);
        filter.setEvaluator(eval);
        filter.setSearch(search);
        filter.setInputFormat(data);
        Instances newData = Filter.useFilter(data, filter);
        System.out.println(newData);
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void useLowLevel(Instances data) throws Exception {
        System.out.println("\n3. Low-level");
        AttributeSelection attsel = new AttributeSelection();
        CfsSubsetEval eval = new CfsSubsetEval();
        GreedyStepwise search = new GreedyStepwise();
        search.setSearchBackwards(true);
        attsel.setEvaluator(eval);
        attsel.setSearch(search);
        attsel.SelectAttributes(data);
        int[] indices = attsel.selectedAttributes();
        System.out.println("selected attribute indices (starting with 0):\n" + Utils.arrayToString(indices));
        jTextField2.setText(Utils.arrayToString(indices));
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private BufferedReader readDataFile(String fn) {
        BufferedReader inputReader = null;
 
	try 
        {
            inputReader = new BufferedReader(new FileReader(fn));
	}
        catch (FileNotFoundException ex) 
        {
            System.err.println("File not found: " + fn);
	}
 
	return inputReader;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private Instances[][] crossValidationSplit(Instances data, int numberOfFolds) {
        Instances[][] split = new Instances[2][numberOfFolds];
 
	for (int i = 0; i < numberOfFolds; i++) 
        {
            split[0][i] = data.trainCV(numberOfFolds, i);
            split[1][i] = data.testCV(numberOfFolds, i);
	}
 	return split;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private Evaluation classify(Classifier model, Instances trainingSet, Instances testingSet) throws Exception {
        Evaluation evaluation = new Evaluation(trainingSet);
 
	model.buildClassifier(trainingSet);
	evaluation.evaluateModel(model, testingSet);
 
	return evaluation;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private double calculateAccuracy(FastVector predictions) {
        double correct = 0;
 
	for (int i = 0; i < predictions.size(); i++) 
        {
            NominalPrediction np = (NominalPrediction) predictions.elementAt(i);
            if (np.predicted() == np.actual())
            {
                correct++;
            }
	}
 	return 100 * correct / predictions.size();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
